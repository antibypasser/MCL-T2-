function Write-ColoredLine {
param (
[string]$Text,
[ConsoleColor]$Color = 'White'
)
$oldColor = $Host.UI.RawUI.ForegroundColor
$Host.UI.RawUI.ForegroundColor = $Color
Write-Host $Text
$Host.UI.RawUI.ForegroundColor = $oldColor
}
function Wait-ForEnter {
Start-Sleep -Seconds 1
Write-Host "Press Enter to continue..." -ForegroundColor Yellow
while ($true) {
if ([System.Console]::KeyAvailable) {
$key = [System.Console]::ReadKey($true)
if ($key.Key -eq "Enter") { break }
}
Start-Sleep -Milliseconds 100
}
}
Clear-Host
Write-Host " _____ _____  _      ____             ____        _           " -ForegroundColor Yellow
Write-Host "| ____|_   _|/ \    |  _ \ ___  ___  |  _ \ _   _| | ___  ___ " -ForegroundColor Yellow
Write-Host "|  _|   | | / _ \   | |_) / _ \/ __| | |_) | | | | |/ _ \/ __|" -ForegroundColor Yellow
Write-Host "| |___  | |/ ___ \  |  _ <  __/ (__  |  _ <| |_| | |  __/\__ \" -ForegroundColor Yellow
Write-Host "|_____| |_/_/   \_\ |_| \_\___|\___| |_| \_\\__,_|_|\___||___/" -ForegroundColor Yellow
Write-ColoredLine ""
Write-ColoredLine "=== Recording Rule Hub ===" Yellow
Write-ColoredLine "Complete all steps with 100% success to pass." White
Write-ColoredLine ""
Write-ColoredLine "=== Information ===" Yellow
Write-ColoredLine "> ZIPs will download to C:\ToolsETA" White
Write-ColoredLine "> They auto-extract and apply per window." White
Write-ColoredLine "> Depending on your CPU, it might take longer to load things." White
Write-ColoredLine "> Your CPU will be listed below. Green means that it will load fast, red means that it may take longer than expected." White
Write-Host ""
$cpu = Get-WmiObject Win32_Processor | Select-Object -First 1

if ($cpu.NumberOfCores -ge 4 -and $cpu.MaxClockSpeed -ge 2500) {
    Write-Host "Detected CPU: $($cpu.Name)" -ForegroundColor Green
    Write-Host "Your CPU looks good." -ForegroundColor Green
} else {
    Write-Host "Detected CPU: $($cpu.Name)" -ForegroundColor Red
    Write-Host "Your CPU isn't that strong. This process may take longer for you." -ForegroundColor Yellow
}
Write-ColoredLine ""
Write-ColoredLine "=== Discord Servers ===" Yellow
Write-ColoredLine "discord.gg/mcl" White
Write-ColoredLine "discord.gg/rivalsleague" White
Write-ColoredLine "discord.gg/eta" White
Write-ColoredLine ""
Write-ColoredLine "=== Justice Department ===" Yellow
Write-ColoredLine "discord.gg/etajd" Red
Write-ColoredLine ""
Write-ColoredLine "=== Credits ===" Yellow
Write-ColoredLine "Made by @ravenader1" White
Write-ColoredLine "Made by @cyberthreats" White
Write-Host ""
Wait-ForEnter
Clear-Host
Write-ColoredLine "Step 1: SYSTEM Check - by @cyberthreats" Cyan
Write-ColoredLine "INSTRUCTION: Reach 100% success" Yellow
Write-Host "" # Blank line above progress bar
for ($i = 0; $i -le 10; $i++) {
$percent = $i * 10
$bar = "#" * $i + "-" * (10 - $i)
$line = "Progress: [ $bar ] $percent%"
Write-Host -NoNewline "`r"
$oldColor = $Host.UI.RawUI.ForegroundColor
$Host.UI.RawUI.ForegroundColor = 'Blue'
Write-Host $line -NoNewline
$Host.UI.RawUI.ForegroundColor = $oldColor
Start-Sleep -Milliseconds 200
}
Write-Host "" # Blank line below progress bar
Write-Host ""
$exclusionsOutput = @()
$defenderOutput = @()
$modulesOutput = @()
$windowsOutput = @()
$memoryIntegrityOutput = @()
$threatsOutput = @()
$powershellSigOutput = @()
$defaultModules = @(
"Microsoft.PowerShell.Archive", "Microsoft.PowerShell.Diagnostics", "Microsoft.PowerShell.Host",
"Microsoft.PowerShell.LocalAccounts", "Microsoft.PowerShell.Management", "Microsoft.PowerShell.Security",
"Microsoft.PowerShell.Utility", "PackageManagement", "PowerShellGet", "PSReadLine", "Pester", "ThreadJob"
)
$protectedModule = "Microsoft.PowerShell.Operation.Validation"
$modulesPath = "C:\Program Files\WindowsPowerShell\Modules"
$deletedAny = $false
$protectedFilePath = "$modulesPath\$protectedModule\1.0.1\Diagnostics\Comprehensive\Comprehensive.Tests.ps1"
$expectedHash = "99B7CBE4325BA089DD9440A202B9E35D9E6F134A46312F3F1E93E71F23C8DAE3"
Get-ChildItem $modulesPath -ErrorAction SilentlyContinue | Where-Object { $_.PSIsContainer } | ForEach-Object {
$moduleName = $_.Name
$modulePath = $_.FullName
$isDefault = $defaultModules -contains $moduleName
$isProtected = $moduleName -eq $protectedModule
$files = Get-ChildItem $modulePath -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { -not $_.PSIsContainer }
$unauthorizedFiles = @()
foreach ($file in $files) {
$sig = Get-AuthenticodeSignature $file.FullName
if ($sig.Status -ne 'Valid' -or $sig.SignerCertificate.Subject -notmatch "Microsoft") {
$unauthorizedFiles += $file
}
}
if (-not $isDefault -and -not $isProtected) {
foreach ($file in $files) { try { $file.Attributes = 'Normal' } catch {} }
try {
Remove-Item $modulePath -Recurse -Force -ErrorAction Stop
$modulesOutput += "FAILURE: Removed unauthorized module: $moduleName"
$deletedAny = $true
} catch {
$modulesOutput += "WARNING: Could not delete module '$moduleName'"
}
} elseif ($isProtected) {
if ($unauthorizedFiles.Count -eq 0) {
$modulesOutput += "SUCCESS: Protected module '$moduleName' verified."
} else {
foreach ($file in $unauthorizedFiles) {
if ($file.FullName -ieq $protectedFilePath) {
try {
$bytes = [System.IO.File]::ReadAllBytes($file.FullName)
$sha256 = [System.Security.Cryptography.SHA256]::Create()
$actual = $sha256.ComputeHash($bytes)
$hash = ([BitConverter]::ToString($actual)).Replace("-", "")
if ($hash -ne $expectedHash) {
$modulesOutput += "WARNING: Protected file altered: '$($file.FullName)'"
}
} catch {}
}
}
$modulesOutput += "SUCCESS: Protected module intact."
}
} else {
foreach ($file in $unauthorizedFiles) {
try {
$file.Attributes = 'Normal'
Remove-Item $file.FullName -Force -ErrorAction Stop
$modulesOutput += "FAILURE: Removed unauthorized file: '$($file.FullName)'"
$deletedAny = $true
} catch {
$modulesOutput += "WARNING: Could not delete file '$($file.FullName)'"
}
}
if ($unauthorizedFiles.Count -eq 0) {
$modulesOutput += "SUCCESS: Module '$moduleName' passed signature check."
}
}
}
Get-ChildItem $modulesPath -Force -ErrorAction SilentlyContinue | Where-Object { -not $_.PSIsContainer } | ForEach-Object {
$sig = Get-AuthenticodeSignature $_.FullName
if ($sig.Status -ne 'Valid' -or $sig.SignerCertificate.Subject -notmatch "Microsoft") {
try {
Remove-Item $_.FullName -Force
$modulesOutput += "FAILURE: Removed unsigned file: '$($_.FullName)'"
$deletedAny = $true
} catch {
$modulesOutput += "WARNING: Could not delete root file '$($_.FullName)'"
}
} else {
$modulesOutput += "SUCCESS: Root file '$($_.Name)' is signed."
}
}
if (-not $deletedAny) {
$modulesOutput += "SUCCESS: No unauthorized modules/files found."
}
try {
if ($env:OS -eq "Windows_NT" -and (Get-CimInstance Win32_OperatingSystem -ErrorAction Stop)) {
$windowsOutput += "SUCCESS: Running on Windows."
} else {
$windowsOutput += "FAILURE: Not running on Windows."
}
} catch {
$windowsOutput += "FAILURE: OS check failed."
}
try {
$regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"
$enabled = Get-ItemPropertyValue -Path $regPath -Name "Enabled" -ErrorAction Stop
$memoryIntegrityOutput += "SUCCESS: Memory Integrity supported."
if ($enabled -eq 1) {
$memoryIntegrityOutput += "SUCCESS: Memory Integrity is ON."
} else {
$memoryIntegrityOutput += "FAILURE: Memory Integrity is OFF."
}
} catch {
$memoryIntegrityOutput += "FAILURE: Memory Integrity not supported or inaccessible."
}
try {
$defender = Get-MpComputerStatus
if ($defender.AMServiceEnabled) {
if (-not $defender.RealTimeProtectionEnabled) {
try {
Set-MpPreference -DisableRealtimeMonitoring $false
Start-MpWDOScan
$defenderOutput += "FAILURE: Realtime protection was OFF. Enabling..."
} catch {
$defenderOutput += "WARNING: Could not re-enable Defender."
}
} else {
$defenderOutput += "SUCCESS: Realtime protection is ON."
}
} else {
$defenderOutput += "FAILURE: Defender is not running."
}
} catch {
$defenderOutput += "WARNING: Defender status unavailable."
}
try {
$exclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
if ($exclusions) {
$exclusionsOutput += "FAILURE: Exclusion paths found:`n$($exclusions -join "`n")"
} else {
$exclusionsOutput += "SUCCESS: No Defender exclusions set."
}
} catch {
$exclusionsOutput += "WARNING: Could not check exclusions."
}
try {
$threats = Get-MpThreat | Where-Object { $_.Status -eq "Active" }
if ($threats) {
foreach ($t in $threats) {
$threatsOutput += "FAILURE: $($t.ThreatName) | $($t.Resources)"
}
} else {
$threatsOutput += "SUCCESS: No active threats."
}
} catch {
$threatsOutput += "WARNING: Threat scan failed."
}
try {
$psPath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\powershell.exe"
$sig = Get-AuthenticodeSignature -FilePath $psPath
if ($sig.Status -eq 'Valid' -and $sig.SignerCertificate.Subject -like '*Microsoft Windows*') {
$powershellSigOutput += "SUCCESS: PowerShell is signed and valid."
} else {
$powershellSigOutput += "FAILURE: PowerShell binary signature invalid."
}
} catch {
$powershellSigOutput += "WARNING: Could not verify PowerShell binary."
}
function Write-Section {
param([string]$Title, [string[]]$Lines)
Write-Host "--- $Title ---" -ForegroundColor White
foreach ($line in $Lines) {
if ($line -match "^SUCCESS") { Write-Host $line -ForegroundColor Green }
elseif ($line -match "^FAILURE") { Write-Host $line -ForegroundColor Red }
elseif ($line -match "^WARNING") { Write-Host $line -ForegroundColor Yellow }
else { Write-Host $line -ForegroundColor White }
}
}
Write-Section "Files + Modules" $modulesOutput
Write-Section "OS Check" $windowsOutput
Write-Section "Memory Integrity" $memoryIntegrityOutput
Write-Section "Windows Defender" $defenderOutput
Write-Section "Exclusions" $exclusionsOutput
Write-Section "Threats" $threatsOutput
Write-Section "Binary Sig" $powershellSigOutput
$allResults = $modulesOutput + $windowsOutput + $memoryIntegrityOutput + $defenderOutput + $exclusionsOutput + $threatsOutput + $powershellSigOutput
$total = ($allResults | Where-Object { $_ -match '^(SUCCESS|FAILURE|WARNING)' }).Count
$success = ($allResults | Where-Object { $_ -match '^SUCCESS' }).Count
$rate = if ($total -gt 0) { [math]::Round(($success / $total) * 100, 0) } else { 0 }
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }
Write-Host ""
Write-Host ("Success Rate: $rate% ($success / $total)") -ForegroundColor $rateColor
Wait-ForEnter
Clear-Host
Write-ColoredLine "Step 2: PREFETCH Check - by @cyberthreats" Cyan
Write-ColoredLine "INSTRUCTION: Slowly scroll to the very bottom, then close the window" Yellow
function Show-LoadingBar {
Write-Host "" # Blank line above progress bar
for ($i = 0; $i -le 10; $i++) {
$percent = $i * 10
$bar = "#" * $i + "-" * (10 - $i)
$line = "Progress: [ $bar ] $percent%"
Write-Host -NoNewline "`r"
$oldColor = $Host.UI.RawUI.ForegroundColor
$Host.UI.RawUI.ForegroundColor = 'Blue'
Write-Host $line -NoNewline
$Host.UI.RawUI.ForegroundColor = $oldColor
Start-Sleep -Milliseconds 200
}
Write-Host "" # Blank line below progress bar
Write-Host "" # Extra blank line below progress bar
}
Show-LoadingBar
Write-Host "Prefetcher check completed." -ForegroundColor Green
$regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters"
$successCounter = 0
$totalSteps = 2
function Ensure-PrefetcherEnabled {
try {
$currentValue = Get-ItemPropertyValue -Path $regPath -Name EnablePrefetcher -ErrorAction Stop
if ($currentValue -ne 3) {
Set-ItemProperty -Path $regPath -Name EnablePrefetcher -Value 3 -ErrorAction Stop
Write-Host "Prefetcher has been enabled." -ForegroundColor Green
} else {
Write-Host "Prefetcher is already enabled." -ForegroundColor Green
}
$GLOBAL:successCounter++
} catch {
Write-Host "Error: Unable to access or modify Prefetcher registry setting." -ForegroundColor Red
}
}
Ensure-PrefetcherEnabled
function Show-PrefetchFilesViaShell {
$prefetchDir = "C:\Windows\Prefetch"
try {
$shell = New-Object -ComObject Shell.Application
$folder = $shell.Namespace($prefetchDir)
if (-not $folder) {
Write-Host "Cannot access Prefetch directory via Shell." -ForegroundColor Red
return
}
$items = @()
for ($i = 0; $i -lt $folder.Items().Count; $i++) {
$item = $folder.Items().Item($i)
if ($item.Name -like "*.pf") {
$items += $item
}
}
if ($items.Count -eq 0) {
Write-Host "No prefetch files found in $prefetchDir." -ForegroundColor Red
return
}
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
$form = New-Object System.Windows.Forms.Form
$form.Text = "Sigma Prefetch Viewer (Shell)"
$form.WindowState = 'Maximized'
$form.MinimumSize = New-Object System.Drawing.Size(800, 600)
$form.StartPosition = "CenterScreen"
$form.BackColor = [System.Drawing.Color]::White
$form.Topmost = $true
$form.FormBorderStyle = 'Sizable'
$dgv = New-Object System.Windows.Forms.DataGridView
$dgv.Dock = 'Fill'
$dgv.ReadOnly = $true
$dgv.BackgroundColor = [System.Drawing.Color]::White
$dgv.DefaultCellStyle.ForeColor = [System.Drawing.Color]::Black
$dgv.ColumnHeadersDefaultCellStyle.ForeColor = [System.Drawing.Color]::Black
$dgv.ColumnHeadersDefaultCellStyle.BackColor = [System.Drawing.Color]::LightGray
$dgv.EnableHeadersVisualStyles = $false
$dgv.AutoSizeColumnsMode = 'AllCells'
$form.Controls.Add($dgv)
$table = New-Object System.Data.DataTable
$table.Columns.Add("FileName", [string]) | Out-Null
$table.Columns.Add("Size (KB)", [double]) | Out-Null
$table.Columns.Add("LastWriteTime", [datetime]) | Out-Null
foreach ($item in $items) {
$filePath = Join-Path $prefetchDir $item.Name
$fileInfo = Get-Item $filePath
$row = $table.NewRow()
$row["FileName"] = $item.Name
$row["Size (KB)"] = [math]::Round($fileInfo.Length / 1KB, 2)
$row["LastWriteTime"] = $fileInfo.LastWriteTime
$table.Rows.Add($row)
}
$dgv.DataSource = $table
$form.Add_Shown({ $form.Activate() })
$GLOBAL:successCounter++
[void] $form.ShowDialog()
} catch {
Write-Host "Failed to list Prefetch files via Shell: $_" -ForegroundColor Red
}
}
Show-PrefetchFilesViaShell
$rate = [math]::Round(($successCounter / $totalSteps) * 100, 0)
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }
Write-Host ""
Write-Host ("Success Rate: $rate% ($successCounter / $totalSteps)") -ForegroundColor $rateColor
Wait-ForEnter
Clear-Host
# ====== STEP 3: BAM ENTRIES CHECK ====== 
$ErrorActionPreference = "SilentlyContinue"

function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

function Wait-ForEnter {
    Start-Sleep -Seconds 1
    Write-Host "Press Enter to continue..." -ForegroundColor Yellow
    while ($true) {
        if ([System.Console]::KeyAvailable) {
            $key = [System.Console]::ReadKey($true)
            if ($key.Key -eq "Enter") { break }
        }
        Start-Sleep -Milliseconds 100
    }
}

function Show-LoadingBar {
    Write-Host ""
    for ($i = 0; $i -le 10; $i++) {
        $percent = $i * 10
        $bar = "#" * $i + "-" * (10 - $i)
        Write-Host ("Progress: [ $bar ] $percent%").PadRight(40) -ForegroundColor Blue
        Start-Sleep -Milliseconds 200
    }
    Write-Host ""
}

# --- STEP 3: BAM ENTRIES ---
$ErrorActionPreference = "SilentlyContinue"

function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

function Wait-ForEnter {
    Start-Sleep -Seconds 1
    Write-Host "Press Enter to continue..." -ForegroundColor Yellow
    while ($true) {
        if ([System.Console]::KeyAvailable) {
            $key = [System.Console]::ReadKey($true)
            if ($key.Key -eq "Enter") { break }
        }
        Start-Sleep -Milliseconds 100
    }
}

Clear-Host

Write-ColoredLine "Step 3: BAM Entries - by @cyberthreats" Cyan
Write-ColoredLine "INSTRUCTION: Full screen the window, slowly scroll to the very bottom, then close the window" Yellow

Write-Host ""
for ($i = 0; $i -le 10; $i++) {
    $percent = $i * 10
    $bar = "#" * $i + "-" * (10 - $i)
    Write-Host "`rProgress: [ $bar ] $percent% " -ForegroundColor Blue -NoNewline
    Start-Sleep -Milliseconds 200
}
Write-Host ""

function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

if (!(Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try { New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE }
    Catch { Write-Warning "Error Mounting HKEY_Local_Machine" }
}

$bv = ("bam", "bam\State")
Try {
    $Users = foreach ($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$($ii)\UserSettings\" | Select-Object -ExpandProperty PSChildName
    }
} Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}

$rpath = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\", "HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")
$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

function Get-Signature {
    param ([string[]]$FilePath)
    $Existence = Test-Path -PathType "Leaf" -Path $FilePath
    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    if ($Existence) {
        switch ($Authenticode) {
            "Valid"       { return "Valid Signature" }
            "NotSigned"   { return "Invalid Signature (NotSigned)" }
            "HashMismatch"{ return "Invalid Signature (HashMismatch)" }
            "NotTrusted"  { return "Invalid Signature (NotTrusted)" }
            default       { return "Invalid Signature (UnknownError)" }
        }
    } else {
        return "File Was Not Found"
    }
}

$Bam = foreach ($Sid in $Users) {
    foreach ($rp in $rpath) {
        $BamItems = Get-Item -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]).Value
        } Catch {
            $User = ""
        }

        foreach ($Item in $BamItems) {
            $Key = Get-ItemProperty -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item
            if ($Key.length -eq 24) {
                $Hex = [System.BitConverter]::ToString($Key[7..0]) -replace "-", ""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC   = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUser  = (Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))).AddMinutes($UserBias) -Format "yyyy-MM-dd HH:mm:ss")

                $f = Split-Path -Leaf $Item

                if ($Item -match '^\\Device\\HarddiskVolume\d+\\(.+)$') {
                    $relativePath = $matches[1]
                    $path = Join-Path -Path "C:\" -ChildPath $relativePath
                    $sig = Get-Signature -FilePath $path
                } else {
                    $path = ""
                    $sig = ""
                }

                [PSCustomObject]@{
                    'Examiner Time'             = $TimeLocal
                    'Last Execution Time (UTC)' = $TimeUTC
                    'Last Execution User Time'  = $TimeUser
                    Application                 = $f
                    Path                        = $path
                    Signature                   = $sig
                    User                        = $User
                    SID                         = $Sid
                    Regpath                     = $rp
                }
            }
        }
    }
}

$Bam | Out-GridView -PassThru -Title "BAM key entries $($Bam.count)  - User TimeZone: ($UserTime) -> ActiveBias: ($UserBias) - DayLightTime: ($UserDay)"

$success = if ($Bam.Count -gt 0) { $true } else { $false }

Write-Host ""
if ($success) {
    Write-ColoredLine "BAM Entries successful!" Green
    $successCounter = 1
} else {
    Write-ColoredLine "BAM Entries failed!" Red
    $successCounter = 0
}

$totalSteps = 1
$rate = [math]::Round(($successCounter / $totalSteps) * 100, 0)
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }

Write-Host ""
Write-Host ("Success Rate: $rate% ($successCounter / $totalSteps)") -ForegroundColor $rateColor

Wait-ForEnter
Clear-Host
